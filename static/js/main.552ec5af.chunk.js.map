{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoItem/TodoITem.tsx","components/TodoList/TodoList.tsx","utils/preparedTodo.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initState","filterReducer","todos","todosReducer","filter","tod","id","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","TodoItem","React","memo","isCurrent","title","completed","dispatch","className","cn","onClick","currentTodoActions","TodoList","visibleTodos","useMemo","preparedTodos","lowerQuery","toLowerCase","includes","Error","getVisibleTodos","length","map","TodoFilter","handleSelect","useCallback","event","value","target","filterActions","handleInput","handleClearQuery","onSubmit","preventDefault","onChange","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isLoading","setIsLoading","hasError","setHasError","hasReceivedUser","setHasReceivedUser","useEffect","fetchUser","a","userId","fetchedUser","href","email","name","App","hasReceivedTodos","setHasReceivedTodos","fetchTodos","todoActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.552ec5af.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryActions = { type: 'filter/SET_QUERY', payload: string };\ntype RemoveQueryActions = { type: 'filter/REMOVE_QUERY' };\ntype SetStatusActions = { type: 'filter/SET_STATUS', payload: Status };\n\ntype Action = SetQueryActions | RemoveQueryActions | SetStatusActions;\n\nconst setQuery = (query: string): SetQueryActions => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst removeQuery = (): RemoveQueryActions => ({\n  type: 'filter/REMOVE_QUERY',\n});\n\nconst setStatus = (status: Status): SetStatusActions => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, removeQuery, setStatus };\n\ntype State = {\n  query: string,\n  status: Status,\n};\n\nconst initState: State = { query: '', status: 'all' };\n\nconst filterReducer = (state = initState, action: Action): State => {\n  switch (action.type) {\n    case 'filter/REMOVE_QUERY':\n      return { ...state, query: '' };\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\ntype AddTodosAction = {\n  type: 'todos/ADD',\n  payload: Todo,\n};\n\ntype RemoveTodosAction = {\n  type: 'todos/REMOVE',\n  payload: Todo,\n};\n\ntype Action = SetTodosAction | AddTodosAction | RemoveTodosAction;\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nconst addTodo = (todo: Todo): AddTodosAction => ({\n  type: 'todos/ADD',\n  payload: todo,\n});\n\nconst removeTodo = (todo: Todo): RemoveTodosAction => ({\n  type: 'todos/REMOVE',\n  payload: todo,\n});\n\nexport const actions = { setTodos, addTodo, removeTodo };\n\ntype State = Todo[];\n\nconst todosReducer = (state: State = [], action: Action): State => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...action.payload];\n    case 'todos/ADD':\n      return [...state, action.payload];\n    case 'todos/REMOVE':\n      return state.filter(tod => tod.id !== action.payload.id);\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport currentTodoReducer from '../features/currentTodo';\r\nimport filterReducer from '../features/filter';\r\nimport todosReducer from '../features/todos';\r\n\r\nconst rootReducer = combineReducers({\r\n  currentTodo: currentTodoReducer,\r\n  filter: filterReducer,\r\n  todos: todosReducer,\r\n});\r\n\r\n// The `store` is passed to the Provider in `/src/index.tsx`\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(\r\n    applyMiddleware(thunk),\r\n  ),\r\n);\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { AppDispatch, RootState } from './store';\r\n\r\nexport const useAppDispatch: () => AppDispatch = useDispatch;\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import React from 'react';\nimport cn from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo,\n  isCurrent: boolean,\n};\n\nexport const TodoItem: React.FC<Props> = React.memo(({ todo, isCurrent }) => {\n  const { id, title, completed } = todo;\n  const dispatch = useDispatch();\n\n  return (\n    <tr data-cy=\"todo\" key={id}>\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={cn({\n            'has-text-danger': !completed,\n            'has-text-success': completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => dispatch(currentTodoActions.setTodo(todo))}\n        >\n          <span className=\"icon\">\n            <i\n              className={cn('far', {\n                'fa-eye': !isCurrent,\n                'fa-eye-slash': isCurrent,\n              })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n});\n","import React, { useMemo } from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { TodoItem } from '../TodoItem/TodoITem';\nimport { getVisibleTodos } from '../../utils/preparedTodo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const visibleTodos = useMemo(\n    () => getVisibleTodos(todos, status, query),\n    [todos, query, status],\n  );\n\n  if (!visibleTodos.length) {\n    return (\n      <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p>\n    );\n  }\n\n  return (\n    <>\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {visibleTodos.map(todo => {\n            const isCurrent = currentTodo?.id === todo.id;\n\n            return (\n              <TodoItem\n                key={todo.id}\n                todo={todo}\n                isCurrent={isCurrent}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nexport const getVisibleTodos = (\n  todos: Todo[],\n  status: Status,\n  query: string,\n) => {\n  let preparedTodos = [...todos];\n\n  if (query) {\n    const lowerQuery = query.toLowerCase();\n\n    preparedTodos = preparedTodos\n      .filter(todo => todo.title.toLowerCase().includes(lowerQuery));\n  }\n\n  preparedTodos = preparedTodos.filter(todo => {\n    switch (status) {\n      case 'all':\n        return true;\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      default:\n        throw new Error('Filter type is incorrect');\n    }\n  });\n\n  return preparedTodos;\n};\n","import React, { ChangeEvent, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const handleSelect = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const value = event.target.value as Status;\n\n      dispatch(filterActions.setStatus(value));\n    },\n    [],\n  );\n\n  const handleInput = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      dispatch(filterActions.setQuery(event.target.value));\n    },\n    [],\n  );\n\n  const handleClearQuery = useCallback(() => {\n    dispatch(filterActions.removeQuery());\n  }, []);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {!!query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\r\nimport './Loader.scss';\r\n\r\nexport const Loader: React.FC = () => (\r\n  <div className=\"Loader\" data-cy=\"loader\">\r\n    <div className=\"Loader__content\" />\r\n  </div>\r\n);\r\n","import { Todo } from './types/Todo';\r\nimport { User } from './types/User';\r\n\r\n// eslint-disable-next-line max-len\r\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\r\n\r\nfunction wait(delay: number): Promise<void> {\r\n  return new Promise(resolve => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n}\r\n\r\nfunction get<T>(url: string): Promise<T> {\r\n  // eslint-disable-next-line prefer-template\r\n  const fullURL = BASE_URL + url + '.json';\r\n\r\n  return wait(300)\r\n    .then(() => fetch(fullURL))\r\n    .then(res => res.json());\r\n}\r\n\r\nexport const getTodos = () => get<Todo[]>('/todos');\r\n\r\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\r\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const todo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [hasReceivedUser, setHasReceivedUser] = useState(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        if (todo) {\n          const fetchedUser = await getUser(todo.userId);\n\n          setUser(fetchedUser);\n          setHasReceivedUser(true);\n        }\n      } catch {\n        setHasError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {isLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todo?.id}`}\n              </div>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(currentTodoActions.removeTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              {hasError && (\n                <strong className=\"has-text-success\">\n                  Unable to load the user\n                </strong>\n              )}\n              {hasReceivedUser && (\n                <>\n                  <p className=\"block\" data-cy=\"modal-title\">{todo?.title}</p>\n                  <p className=\"block\" data-cy=\"modal-user\">\n                    {todo?.completed\n                      ? (<strong className=\"has-text-success\">Done</strong>)\n                      : (<strong className=\"has-text-danger\">Planned</strong>)}\n                    {' by '}\n                    <a href={`mailto:${user?.email}`}>\n                      {user?.name}\n                    </a>\n                  </p>\n                </>\n              )}\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n// import { useAppDispatch } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todoActions } from './features/todos';\nimport { useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [hasReceivedTodos, setHasReceivedTodos] = useState(false);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        const todos = await getTodos();\n\n        dispatch(todoActions.setTodos(todos));\n        setHasReceivedTodos(true);\n      } catch {\n        setHasError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n\n              {hasError && (\n                <p className=\"notification is-danger\">\n                  Unable to load todos\n                </p>\n              )}\n\n              {hasReceivedTodos && <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n      {!!currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\n\r\nimport { store } from './app/store';\r\nimport { App } from './App';\r\n\r\n// Just a convenient component with all the wrappers for the `App`\r\n// The Router component (if you use it) should be placed inside the Provider\r\nconst Root = () => (\r\n  <Provider store={store}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\n"],"sourceRoot":""}